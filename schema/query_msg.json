{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "get_owner"
      ],
      "properties": {
        "get_owner": {
          "type": "object"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "chain"
      ],
      "properties": {
        "chain": {
          "$ref": "#/definitions/QueryRequest_for_StructUmeeQuery"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "umee"
      ],
      "properties": {
        "umee": {
          "$ref": "#/definitions/UmeeQuery"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "borrowed"
      ],
      "properties": {
        "borrowed": {
          "$ref": "#/definitions/BorrowedParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "exchange_rates"
      ],
      "properties": {
        "exchange_rates": {
          "$ref": "#/definitions/ExchangeRatesParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "registered_tokens"
      ],
      "properties": {
        "registered_tokens": {
          "$ref": "#/definitions/RegisteredTokensParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "leverage_parameters"
      ],
      "properties": {
        "leverage_parameters": {
          "$ref": "#/definitions/LeverageParametersParams"
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "borrowed_value"
      ],
      "properties": {
        "borrowed_value": {
          "$ref": "#/definitions/BorrowedValueParams"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AvailableBorrowParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "BankQuery": {
      "anyOf": [
        {
          "description": "This calls into the native bank module for one denomination Return value is BalanceResponse",
          "type": "object",
          "required": [
            "balance"
          ],
          "properties": {
            "balance": {
              "type": "object",
              "required": [
                "address",
                "denom"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "This calls into the native bank module for all denominations. Note that this may be much more expensive than Balance and should be avoided if possible. Return value is AllBalanceResponse.",
          "type": "object",
          "required": [
            "all_balances"
          ],
          "properties": {
            "all_balances": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "BorrowAPYParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "BorrowedParams": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "denom": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "BorrowedValueParams": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "denom": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "ExchangeRatesParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "LeverageParametersParams": {
      "type": "object"
    },
    "MarketSizeParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "QueryRequest_for_StructUmeeQuery": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "bank"
          ],
          "properties": {
            "bank": {
              "$ref": "#/definitions/BankQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "custom"
          ],
          "properties": {
            "custom": {
              "$ref": "#/definitions/StructUmeeQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "staking"
          ],
          "properties": {
            "staking": {
              "$ref": "#/definitions/StakingQuery"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "wasm"
          ],
          "properties": {
            "wasm": {
              "$ref": "#/definitions/WasmQuery"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RegisteredTokensParams": {
      "type": "object"
    },
    "ReserveAmountParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "StakingQuery": {
      "anyOf": [
        {
          "description": "Returns the denomination that can be bonded (if there are multiple native tokens on the chain)",
          "type": "object",
          "required": [
            "bonded_denom"
          ],
          "properties": {
            "bonded_denom": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AllDelegations will return all delegations by the delegator",
          "type": "object",
          "required": [
            "all_delegations"
          ],
          "properties": {
            "all_delegations": {
              "type": "object",
              "required": [
                "delegator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Delegation will return more detailed info on a particular delegation, defined by delegator/validator pair",
          "type": "object",
          "required": [
            "delegation"
          ],
          "properties": {
            "delegation": {
              "type": "object",
              "required": [
                "delegator",
                "validator"
              ],
              "properties": {
                "delegator": {
                  "type": "string"
                },
                "validator": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns all validators in the currently active validator set.\n\nThe query response type is `AllValidatorsResponse`.",
          "type": "object",
          "required": [
            "all_validators"
          ],
          "properties": {
            "all_validators": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Returns the validator at the given address. Returns None if the validator is not part of the currently active validator set.\n\nThe query response type is `ValidatorResponse`.",
          "type": "object",
          "required": [
            "validator"
          ],
          "properties": {
            "validator": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "The validator's address (e.g. (e.g. cosmosvaloper1...))",
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "StructUmeeQuery": {
      "type": "object",
      "required": [
        "assigned_query"
      ],
      "properties": {
        "assigned_query": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "available_borrow": {
          "anyOf": [
            {
              "$ref": "#/definitions/AvailableBorrowParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "borrow_apy": {
          "anyOf": [
            {
              "$ref": "#/definitions/BorrowAPYParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "borrowed": {
          "anyOf": [
            {
              "$ref": "#/definitions/BorrowedParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "borrowed_value": {
          "anyOf": [
            {
              "$ref": "#/definitions/BorrowedValueParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "exchange_rates": {
          "anyOf": [
            {
              "$ref": "#/definitions/ExchangeRatesParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "leverage_parameters": {
          "anyOf": [
            {
              "$ref": "#/definitions/LeverageParametersParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "market_size": {
          "anyOf": [
            {
              "$ref": "#/definitions/MarketSizeParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "registered_tokens": {
          "anyOf": [
            {
              "$ref": "#/definitions/RegisteredTokensParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "reserve_amount": {
          "anyOf": [
            {
              "$ref": "#/definitions/ReserveAmountParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "supplied": {
          "anyOf": [
            {
              "$ref": "#/definitions/SuppliedParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "supplied_value": {
          "anyOf": [
            {
              "$ref": "#/definitions/SuppliedValueParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "supply_apy": {
          "anyOf": [
            {
              "$ref": "#/definitions/SupplyAPYParams"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_market_size": {
          "anyOf": [
            {
              "$ref": "#/definitions/TokenMarketSizeParams"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SuppliedParams": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "denom": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "SuppliedValueParams": {
      "type": "object",
      "required": [
        "address"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "denom": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "SupplyAPYParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "TokenMarketSizeParams": {
      "type": "object",
      "required": [
        "denom"
      ],
      "properties": {
        "denom": {
          "type": "string"
        }
      }
    },
    "UmeeQuery": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "leverage"
          ],
          "properties": {
            "leverage": {
              "$ref": "#/definitions/UmeeQueryLeverage"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "oracle"
          ],
          "properties": {
            "oracle": {
              "$ref": "#/definitions/UmeeQueryOracle"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "UmeeQueryLeverage": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "borrowed"
          ],
          "properties": {
            "borrowed": {
              "$ref": "#/definitions/BorrowedParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "registered_tokens"
          ],
          "properties": {
            "registered_tokens": {
              "$ref": "#/definitions/RegisteredTokensParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "leverage_parameters"
          ],
          "properties": {
            "leverage_parameters": {
              "$ref": "#/definitions/LeverageParametersParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "borrowed_value"
          ],
          "properties": {
            "borrowed_value": {
              "$ref": "#/definitions/BorrowedValueParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "supplied"
          ],
          "properties": {
            "supplied": {
              "$ref": "#/definitions/SuppliedParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "supplied_value"
          ],
          "properties": {
            "supplied_value": {
              "$ref": "#/definitions/SuppliedValueParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "available_borrow"
          ],
          "properties": {
            "available_borrow": {
              "$ref": "#/definitions/AvailableBorrowParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "borrow_a_p_y"
          ],
          "properties": {
            "borrow_a_p_y": {
              "$ref": "#/definitions/BorrowAPYParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "supply_a_p_y"
          ],
          "properties": {
            "supply_a_p_y": {
              "$ref": "#/definitions/SupplyAPYParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "market_size"
          ],
          "properties": {
            "market_size": {
              "$ref": "#/definitions/MarketSizeParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "token_market_size"
          ],
          "properties": {
            "token_market_size": {
              "$ref": "#/definitions/TokenMarketSizeParams"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "reserve_amount"
          ],
          "properties": {
            "reserve_amount": {
              "$ref": "#/definitions/ReserveAmountParams"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "UmeeQueryOracle": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "exchange_rates"
          ],
          "properties": {
            "exchange_rates": {
              "$ref": "#/definitions/ExchangeRatesParams"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WasmQuery": {
      "anyOf": [
        {
          "description": "this queries the public API of another contract at a known address (with known ABI) Return value is whatever the contract returns (caller should know), wrapped in a ContractResult that is JSON encoded.",
          "type": "object",
          "required": [
            "smart"
          ],
          "properties": {
            "smart": {
              "type": "object",
              "required": [
                "contract_addr",
                "msg"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "msg": {
                  "description": "msg is the json-encoded QueryMsg struct",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "this queries the raw kv-store of the contract. returns the raw, unparsed data stored at that key, which may be an empty vector if not present",
          "type": "object",
          "required": [
            "raw"
          ],
          "properties": {
            "raw": {
              "type": "object",
              "required": [
                "contract_addr",
                "key"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                },
                "key": {
                  "description": "Key is the raw key used in the contracts Storage",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "returns a ContractInfoResponse with metadata on the contract from the runtime",
          "type": "object",
          "required": [
            "contract_info"
          ],
          "properties": {
            "contract_info": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
